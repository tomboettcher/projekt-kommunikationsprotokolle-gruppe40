#include <stm32f4xx.h>
#include <stdio.h>
#include <stdint.h>
#include <i2c.h>
#include <uart.h>
#include <gpio.h>

#define Taster_Rot 4 // Port C
#define Taster_Gruen 15 // Port B
#define Taster_Gelb 14 // Port B
#define Taster_Blau 8 // Port C
#define Taster_Send_Request_T 1 // Port C
#define Taster_Send_Request_C 2 // Port C

bool rot = false;
bool gruen = false;
bool gelb = false;
bool blau = false;
bool send_request_c;
bool send_request_t;

#define Adresse_Tom 0x05 // Slave 1
#define Adresse_Christoph 0x04 // Slave 2
#define monitor_speed 115200

int s_data_t = 0b00000000;
int s_data_c = 0b00000000;
int r_data_t = 0b00000000;
int r_data_c = 0b00000000;

int main() 
{
    gpio_setup();
    uart2_setup();
    i2c_master_setup(I2C1,I2C_STANDARD);

    while (1)
    {
        i2c_send_t();
        i2c_send_c();
        i2c_receive_c();
        i2c_recieve_t();
    }
    
}

void uart2_setup()
{  
    // GPIOs konfigurieren
    gpio_enable_port_clock(GPIOA);
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    
    gpio_set_pin_af(GPIOA, 2, AF7);
    gpio_set_pin_af(GPIOA, 3, AF7);
    // baudrate setzen
    uart_set_baudrate(USART2, monitor_speed);
    // uart aktivieren
    USART2->CR1 |= ( USART_CR1_RE | USART_CR1_TE | USART_CR1_UE );
}

void gpio_setup(void)
{
    gpio_enable_port_clock(GPIOB);
    gpio_enable_port_clock(GPIOC);
    gpio_set_mode(GPIOC, Taster_Rot, INPUT);
    gpio_set_mode(GPIOB, Taster_Gruen, INPUT);
    gpio_set_mode(GPIOB, Taster_Gelb, INPUT);
    gpio_set_mode(GPIOB, Taster_Blau, INPUT);
}

void i2c_send_t(void)
{
    if (gpio_read_pin_state(GPIOC, Taster_Rot) == 1)
    {
        if(rot == false)
        {
            s_data_t = s_data_t | 0b00000001;
            i2c_master_transmit(I2C2, Adresse_Tom, &s_data_t, 1);
        }else
        {
            s_data_t = s_data_t &(~0b00000001);
            i2c_master_transmit(I2C2, Adresse_Tom, &s_data_t, 1);
        }
        rot =! rot;
    }

    if (gpio_read_pin_state(GPIOC, Taster_Gruen) == 1)
    {
        if(gruen == false)
        {
            s_data_t = s_data_t | 0b00000010;
            i2c_master_transmit(I2C2, Adresse_Tom, &s_data_t, 1);
        }else
        {
            s_data_t = s_data_t &(~0b00000010);
            i2c_master_transmit(I2C2, Adresse_Tom, &s_data_t, 1);
        }
        gruen =! gruen;
    }
}

void i2c_send_c(void)
{
    if (gpio_read_pin_state(GPIOC, Taster_Blau) == 1)
    {
        if(blau == false)
        {
            s_data_c = s_data_c | 0b00000001;
            i2c_master_transmit(I2C2, Adresse_Christoph, &s_data_c, 1);
        }else
        {
            s_data_c = s_data_c &(~0b00000001);
            i2c_master_transmit(I2C2, Adresse_Christoph, &s_data_c, 1);
        }
        blau =! blau;
    }

    if (gpio_read_pin_state(GPIOC, Taster_Gelb) == 1)
    {
        if(gelb == false)
        {
            s_data_c = s_data_c | 0b00000010;
            i2c_master_transmit(I2C2, Adresse_Christoph, &s_data_c, 1);
        }else
        {
            s_data_c = s_data_c &(~0b00000010);
            i2c_master_transmit(I2C2, Adresse_Christoph, &s_data_c, 1);
        }
        gelb =! gelb;
    }
}


void i2c_receive_c(void)
{
    if (gpio_read_pin_state(GPIOC, Taster_Send_Request_C) == 1)
    {
        if(send_request_c == false)
        {
            i2c_master_receive(I2C1, Adresse_Christoph, r_data_c, 1);
            if(r_data_c == 0b00000001)
            {
                printf("Blaue Led AN! \n");
            }
            if(r_data_c == 0b00000010)
            {
                printf("Gelbe Led AN! \n");
            }
        }
        send_request_c != send_request_c;
    }
}

void i2c_recieve_t(void)
{
    if (gpio_read_pin_state(GPIOC, Taster_Send_Request_T) == 1)
    {
        if(send_request_t == false)
        {
            i2c_master_receive(I2C1, Adresse_Tom, r_data_t, 1);
            if(r_data_t == 0b00000001)
            {
                printf("Rote Led AN! \n");
            }
            if(r_data_t == 0b00000010)
            {
                printf("Gr√ºne Led AN! \n");
            }
        }
        send_request_t != send_request_t;
    }
}
